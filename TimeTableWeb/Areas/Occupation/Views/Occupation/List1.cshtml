@model IList<TimeTableWeb.Areas.Occupation.Models.OccupationList1ViewModel>
@{
    ViewBag.Title = "Occupation List One";
}

<div class="col-md-12">
    <p>Move mouse over the bar.</p>
    <style>
        .chart {
            padding: 0;
            margin: 20px;
        }
    </style>
    <script src="~/Scripts/jquery-2.1.4.min.js"></script>
    <script>
        $(document).ready(function () {
            $(".pie").mouseenter(function () {
                var code = $(this).attr("class").split(" ")[0];
                $("." + code).filter(".line").stop().fadeIn("fast");
                $(".pie").not("." + code).stop().animate({
                    opacity: 0.3
                }, "fast");
            })

            $(".pie").mouseleave(function () {
                var noc = $(this).attr("class");
                var code = $(this).attr("class").split(" ")[0];
                $("." + code).filter(".line").stop().fadeOut("fast");
                $(".pie").not("." + code).stop().animate({
                    opacity: 1
                }, "fast");
            })
        })
    </script>
    @{
        //Set SVG Height
        //Min 400 (Pie radious 120 * 2 + Pie Margin 80 * 2)
        //Max Model.Count * 30 + 10 * 2(Margin)
        ViewBag.SVGHeight = Math.Max(400, Model.Count() * 30 + 20);
    }
    <svg class="chart col-md-12" height="@ViewBag.SVGHeight">
        <g transform="translate(150,@(ViewBag.SVGHeight/2))">
            @{
                //Draw Arc
                foreach (var item in Model)
                {
                    //Calculate BeginPoint(Outer)
                    double xOuterBegin = -120 * Math.Cos(item.ArcBegin);
                    double yOuterBegin = -120 * Math.Sin(item.ArcBegin);

                    //Calculate EndPoint(Outer)
                    double xOuterEnd = -120 * Math.Cos(item.ArcEnd);
                    double yOuterEnd = -120 * Math.Sin(item.ArcEnd);

                    //Calculate BeginPoint(Inner)
                    double xInnerBegin = -60 * Math.Cos(item.ArcBegin);
                    double yInnerBegin = -60 * Math.Sin(item.ArcBegin);

                    //Calculate EndPoint(Inner)
                    double xInnerEnd = -60 * Math.Cos(item.ArcEnd);
                    double yInnerEnd = -60 * Math.Sin(item.ArcEnd);

                    //Draw Arc
                    if (item.ArcEnd - item.ArcBegin >= Math.PI)
                    {
                        //Arc longer than 180 degree
                        <path class="@item.Code pie" d=@("M" + xOuterBegin + "," + yOuterBegin + "A120,120,0,1,1," + xOuterEnd + "," + yOuterEnd + "L" + xInnerEnd + "," + yInnerEnd + "A60,60,0,1,0," + xInnerBegin + "," + yInnerBegin + "Z") fill="@("#" + item.Color)"></path>
                    }
                    else
                    {
                        //Arc shorter than 180 degree
                        <path class="@item.Code pie" d=@("M" + xOuterBegin + "," + yOuterBegin + "A120,120,0,0,1," + xOuterEnd + "," + yOuterEnd + "L" + xInnerEnd + "," + yInnerEnd + "A60,60,0,0,0," + xInnerBegin + "," + yInnerBegin + "Z") fill="@("#" + item.Color)"></path>
                    }
                }
            }
        </g>
        <g transform="translate(350, @(Math.Max(0,(400 - (Model.Count() * 30 + 20)) / 2)))">
            @{
                //Get Largest Count
                int max = Model.Max(e => e.Count);

                //Draw Text and Bar
                for (int i = 0; i < Model.Count(); i++)
                {
                    <g class="@Model[i].Code pie" transform="translate(0 , @(i * 30 + 10))" fill="@("#" + Model[i].Color)">
                        <text x="0" y="20" font-size="16px" font-weight="bold">@Model[i].Code</text>
                        <rect x="56" y="3" width="@(Model[i].Count * 250 / max)" height="24" rx="5" ry="5"></rect>
                        <text x="@(Model[i].Count * 250 / max + 60)" y="20" font-size="16px" font-weight="bold">@Model[i].Count</text>
                    </g>
                }
            }
        </g>
        <g>
            @{
                //Draw Line Between middle of outer arc and tag
                for (int i = 0; i < Model.Count(); i++)
                {
                    var item = Model[i];

                    double xLineBegin1 = -120 * Math.Cos((item.ArcBegin + item.ArcEnd) / 2) + 150;
                    double yLineBegin1 = -120 * Math.Sin((item.ArcBegin + item.ArcEnd) / 2) + ViewBag.SVGHeight / 2;

                    double xLineBegin2 = -240 * Math.Cos((item.ArcBegin + item.ArcEnd) / 2) + 150;
                    double yLineBegin2 = -240 * Math.Sin((item.ArcBegin + item.ArcEnd) / 2) + ViewBag.SVGHeight / 2;

                    double xLineEnd1 = 250;
                    double yLineEnd1 = i * 30 + 25 + Math.Max(0, (400 - (Model.Count() * 30 + 20)) / 2);

                    double xLineEnd2 = 350;
                    double yLineEnd2 = i * 30 + 25 + Math.Max(0, (400 - (Model.Count() * 30 + 20)) / 2);

                    <path class="@item.Code line" d="@("M" + xLineBegin1 + "," + yLineBegin1 + "C" + xLineBegin2 + " " + yLineBegin2 + "," + xLineEnd1 + " " + yLineEnd1 + "," + xLineEnd2 + " " + yLineEnd2)" stroke="@("#"+ item.Color)" stroke-width="2" fill="transparent" style="display:none"></path>
                }
            }
        </g>
    </svg>
</div>
